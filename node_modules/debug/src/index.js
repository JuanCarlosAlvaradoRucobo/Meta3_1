const express = require('express');
const swaggerJsdoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');
const port = 4000;
const app = express();
app.use(express.json()); // Necesario para procesar JSON en req.body

// Importar estudiantes.js
const estudiantes = require('./estudiantes');

// Configuración de Swagger
const swaggerOptions = {
  definition: {
    openapi: '3.0.0',
    info: {
      title: 'Servicio Web - Estudiante',
      version: '1.0.0',
      description: 'API para gestionar estudiantes (CRUD)',
    },
    servers: [
      {
        url: 'http://localhost:4000/api/v1',
        description: 'Servidor local',
      },
    ],
  },
  apis: ['./index.js'],
};


const swaggerDocs = swaggerJsdoc(swaggerOptions);
app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerDocs));

/**
 * @swagger
 * components:
 *   schemas:
 *     Estudiante:
 *       type: object
 *       required:
 *         - nombre
 *         - matricula
 *         - semestreIngreso
 *         - creditosCursados
 *       properties:
 *         id:
 *           type: integer
 *           description: Identificador único del estudiante
 *         nombre:
 *           type: string
 *           description: Nombre completo del estudiante
 *         matricula:
 *           type: string
 *           description: Matrícula única del estudiante
 *         semestreIngreso:
 *           type: string
 *           description: Semestre de ingreso del estudiante
 *         creditosCursados:
 *           type: integer
 *           description: Créditos que el estudiante ha cursado hasta la fecha
 */

/**
 * @swagger
 * /api/v1/estudiantes:
 *   get:
 *     summary: Obtener todos los estudiantes
 *     responses:
 *       200:
 *         description: Lista de estudiantes
 *         content:
 *           application/json:
 *             schema:
 *               type: array
 *               items:
 *                 $ref: '#/components/schemas/Estudiante'
 */

/**
 * @swagger
 * /api/v1/estudiantes/{matricula}:
 *   get:
 *     summary: Obtener un estudiante por matrícula
 *     parameters:
 *       - in: path
 *         name: matricula
 *         required: true
 *         description: Matrícula del estudiante
 *         schema:
 *           type: string
 *     responses:
 *       200:
 *         description: Estudiante encontrado
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Estudiante'
 *       404:
 *         description: Estudiante no encontrado
 */

/**
 * @swagger
 * /api/v1/estudiantes:
 *   post:
 *     summary: Crear un nuevo estudiante
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Estudiante'
 *     responses:
 *       201:
 *         description: Estudiante creado
 *       400:
 *         description: Error en la creación
 */

/**
 * @swagger
 * /api/v1/estudiantes/{matricula}:
 *   put:
 *     summary: Actualizar un estudiante existente
 *     parameters:
 *       - in: path
 *         name: matricula
 *         required: true
 *         description: Matrícula del estudiante a actualizar
 *         schema:
 *           type: string
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             $ref: '#/components/schemas/Estudiante'
 *     responses:
 *       200:
 *         description: Estudiante actualizado
 *       404:
 *         description: Estudiante no encontrado
 */

/**
 * @swagger
 * /api/v1/estudiantes/{matricula}:
 *   delete:
 *     summary: Eliminar un estudiante
 *     parameters:
 *       - in: path
 *         name: matricula
 *         required: true
 *         description: Matrícula del estudiante a eliminar
 *         schema:
 *           type: string
 *     responses:
 *       204:
 *         description: Estudiante eliminado exitosamente
 *       404:
 *         description: Estudiante no encontrado
 */


// Endpoints CRUD

// Consultar todos los estudiantes
app.get('/api/v1/estudiantes', (req, res) => {
  res.status(200).json(estudiantes.findAll());
});

// Consultar estudiante por matrícula
app.get('/api/v1/estudiantes/:matricula', (req, res) => {
  const estudiante = estudiantes.findByMatricula(req.params.matricula);
  if (estudiante) {
    res.status(200).json(estudiante);
  } else {
    res.status(404).json({ message: 'Estudiante no encontrado' });
  }
});

// Crear un nuevo estudiante
app.post('/api/v1/estudiantes', (req, res) => {
  const nuevoEstudiante = req.body;
  const estudianteGuardado = estudiantes.save(nuevoEstudiante.id, nuevoEstudiante);
  res.status(201).json(estudianteGuardado);
});

// Actualizar estudiante por ID
app.put('/api/v1/estudiantes/:id', (req, res) => {
  const estudianteActualizado = estudiantes.save(req.params.id, req.body);
  if (estudianteActualizado) {
    res.status(200).json(estudianteActualizado);
  } else {
    res.status(404).json({ message: 'Estudiante no encontrado' });
  }
});

app.listen(port, () => {
  console.log('Servidor escuchando en el puerto:', port);
  console.log(`Documentación Swagger en http://localhost:${port}/api-docs`);
});
